{"ast":null,"code":"var _jsxFileName = \"/Users/kristinabuhovtsova/Documents/Countries/client/src/components/SignUpForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Redirect } from 'react-router';\nimport axios from 'axios';\n\nconst validate = values => {\n  const errors = {};\n  let existingusers = [];\n  axios.get('/catalog/users').then(res => res.data.forEach(name => {\n    existingusers.push(name);\n  }));\n  console.log(existingusers);\n  console.log(values.username);\n\n  if (!values.username) {\n    errors.username = 'Required';\n  } else if (values.username.length < 5) {\n    errors.username = 'Must be 5 characters or more';\n  } else if (existingusers.indexOf(values.username) != 1) {\n    console.log(existingusers.indexOf(values.username));\n    errors.username = 'This nickname is reserved, try another one';\n  }\n\n  if (!values.password) {\n    errors.password = 'Required';\n  }\n\n  if (!values.confirmpassword) {\n    errors.confirmpassword = 'Required';\n  } else if (values.password !== values.confirmpassword) {\n    errors.password = 'Passwords must match';\n  }\n\n  return errors;\n};\n\nconst renderField = ({\n  input,\n  label,\n  type,\n  meta: {\n    touched,\n    error,\n    warning\n  }\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}, React.createElement(\"label\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, label), React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, React.createElement(\"input\", Object.assign({}, input, {\n  placeholder: label,\n  type: type,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n})), touched && (error && React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, error) || warning && React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, warning))));\n\nclass SignUpForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      finished: null,\n      countries: []\n    };\n    this.Clear = this.Clear.bind(this);\n  }\n\n  Clear() {\n    this.setState({\n      finished: true\n    });\n  }\n\n  componentDidMount() {\n    fetch('catalog/countries').then(res => res.json()).then(count => this.setState({\n      countries: count\n    }));\n  }\n\n  render() {\n    const _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          pristine = _this$props.pristine,\n          reset = _this$props.reset,\n          submitting = _this$props.submitting;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"col-9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"username\",\n      type: \"text\",\n      component: renderField,\n      label: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"password\",\n      type: \"password\",\n      component: renderField,\n      label: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"confirmpassword\",\n      type: \"password\",\n      component: renderField,\n      label: \"Confirm password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Where do you live?   \"), React.createElement(Field, {\n      name: \"country\",\n      component: \"select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.countries.map((country, ind) => React.createElement(\"option\", {\n      key: ind,\n      value: country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, country)))), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: submitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Sign Up\"), React.createElement(\"button\", {\n      type: \"button\",\n      disabled: pristine || submitting,\n      onClick: reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Clear Values\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.finished && React.createElement(Redirect, {\n      from: \"/signup\",\n      to: \"/signin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default reduxForm({\n  form: 'SignUpForm',\n  validate\n})(SignUpForm);","map":{"version":3,"sources":["/Users/kristinabuhovtsova/Documents/Countries/client/src/components/SignUpForm.js"],"names":["React","Field","reduxForm","Redirect","axios","validate","values","errors","existingusers","get","then","res","data","forEach","name","push","console","log","username","length","indexOf","password","confirmpassword","renderField","input","label","type","meta","touched","error","warning","SignUpForm","Component","constructor","props","state","finished","countries","Clear","bind","setState","componentDidMount","fetch","json","count","render","handleSubmit","pristine","reset","submitting","map","country","ind","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport { Redirect } from 'react-router'\nimport axios from 'axios';\n\nconst validate = values => {\n    const errors = {}\n    let existingusers=[]\n    axios.get ('/catalog/users')\n      .then (res => res.data.forEach(name => {\n        existingusers.push(name) }))\n    console.log(existingusers)\n    console.log(values.username)\n    if (!values.username) {\n      errors.username = 'Required'\n    } else if (values.username.length < 5) {\n      errors.username = 'Must be 5 characters or more'\n    }\n    else if (existingusers.indexOf(values.username) != 1) {\n      console.log (existingusers.indexOf(values.username))\n      errors.username = 'This nickname is reserved, try another one'\n    }\n    if (!values.password) {\n      errors.password = 'Required'\n    }\n    if (!values.confirmpassword) {\n        errors.confirmpassword = 'Required'\n    }\n    else if (values.password!==values.confirmpassword) {\n      errors.password = 'Passwords must match'\n    } \n\n    return errors\n  }  \n\nconst renderField = ({input, label, type, meta: { touched, error, warning } }) => (\n    <div>\n    <label>{label}</label>\n    <div>\n      <input {...input} placeholder={label} type={type}/>\n      {touched && ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\n    </div>\n  </div>\n)\n\n\nclass SignUpForm extends React.Component{\n        constructor (props) {\n          super (props)\n          this.state = {\n            finished: null, \n            countries: []\n          }\n          this.Clear=this.Clear.bind(this);\n        }\n\n        Clear () {\n          this.setState ({finished: true})\n        }\n\n        componentDidMount() {\n            fetch ('catalog/countries')\n            .then (res => res.json())\n            .then((count) =>this.setState({countries: count}))}\n\n        render () {\n        const { handleSubmit, pristine, reset, submitting } = this.props\n        return (\n           <form onSubmit={handleSubmit} className = 'col-9'>\n               <Field name ='username' type = 'text' component={renderField} label = 'Username'/>\n               <Field name ='password' type = 'password' component={renderField} label = 'Password'/>\n               <Field name ='confirmpassword' type = 'password' component={renderField} label = 'Confirm password'/>\n               \n               <div>\n               <label>Where do you live?   </label>\n               <Field name=\"country\" component=\"select\">\n               {this.state.countries.map((country, ind) =>\n                <option key={ind} value = {country}>{country}</option>)}\n               </Field>\n               </div>\n\n                 <button type = 'submit' disabled={submitting}>Sign Up</button> \n                <button type=\"button\" disabled={pristine || submitting} onClick={reset}>Clear Values</button>\n              \n              <p>{this.state.finished && <Redirect from='/signup' to= '/signin'/>}</p>\n           </form>\n        )}\n}\n\nexport default reduxForm ({\n  form: 'SignUpForm',\n  validate\n})(SignUpForm)"]},"metadata":{},"sourceType":"module"}