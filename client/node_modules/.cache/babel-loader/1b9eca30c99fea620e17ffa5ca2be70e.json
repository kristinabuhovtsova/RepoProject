{"ast":null,"code":"var _jsxFileName = \"/Users/kristinabuhovtsova/Documents/Countries/client/src/components/SignUpForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport '../css/Button.css';\n/*const validate = values => {\n    const errors = {}\n    if (!values.username) {\n      errors.username = 'Required'\n    } else if (values.username.length < 5) {\n      errors.username = 'Must be 5 characters or more'\n    }\n\n    if (!values.password) {\n      errors.password = 'Required'\n    }\n    if (!values.confirmpassword) {\n        errors.confirmpassword = 'Required'\n    }\n    else if (values.password!==values.confirmpassword) {\n      errors.password = 'Passwords must match'\n    }  return errors \n}*/\n\nconst validate = values => {\n  const errors = {};\n  let existingusers = [];\n  let flag = false;\n  axios.get('/catalog/users').then(res => {\n    res.data.forEach(name => {\n      existingusers.push(name);\n    });\n    console.log(existingusers, values.username);\n\n    if (existingusers.includes(values.username)) {\n      flag = true;\n      console.log('here');\n    }\n\n    console.log('flag', flag);\n\n    if (!values.username) {\n      errors.username = 'Required';\n    } else if (values.username.length < 5) {\n      errors.username = 'Must be 5 characters or more';\n    } else if (flag) {\n      console.log('here2');\n      errors.username = 'This nickname is reserved, try another one';\n    }\n\n    if (!values.password) {\n      errors.password = 'Required';\n    }\n\n    if (!values.confirmpassword) {\n      errors.confirmpassword = 'Required';\n    } else if (values.password !== values.confirmpassword) {\n      errors.password = 'Passwords must match';\n    }\n\n    console.log(errors);\n  });\n  console.log('res');\n  console.log(errors);\n  return errors;\n};\n\nconst renderField = ({\n  input,\n  label,\n  type,\n  meta: {\n    touched,\n    error,\n    warning\n  }\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}, React.createElement(\"label\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}, label), React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, React.createElement(\"input\", Object.assign({}, input, {\n  placeholder: label,\n  type: type,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n})), touched && (error && React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}, error) || warning && React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}, warning))));\n\nclass SignUpForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      finished: false,\n      countries: []\n    };\n    this.Clear = this.Clear.bind(this);\n  }\n\n  Clear() {\n    this.setState({\n      finished: true\n    });\n  }\n\n  componentDidMount() {\n    fetch('catalog/countries').then(res => res.json()).then(count => this.setState({\n      countries: count\n    }));\n  }\n\n  render() {\n    const _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          pristine = _this$props.pristine,\n          reset = _this$props.reset,\n          submitting = _this$props.submitting;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"col-9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"username\",\n      type: \"text\",\n      component: renderField,\n      label: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"password\",\n      type: \"password\",\n      component: renderField,\n      label: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"confirmpassword\",\n      type: \"password\",\n      component: renderField,\n      label: \"Confirm password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Where do you live?   \"), React.createElement(Field, {\n      name: \"country\",\n      component: \"select\",\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.countries.map((country, ind) => React.createElement(\"option\", {\n      key: ind,\n      value: country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, country)))), React.createElement(\"button\", {\n      className: \"btn btn-outline-primary signinbut\",\n      type: \"submit\",\n      disabled: submitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Sign Up\"), React.createElement(\"button\", {\n      className: \"btn btn-outline-primary clear signinbut\",\n      type: \"button\",\n      disabled: pristine || submitting,\n      onClick: reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Clear Values\"));\n  }\n\n}\n\nexport default reduxForm({\n  form: 'SignUpForm',\n  validate\n})(SignUpForm);","map":{"version":3,"sources":["/Users/kristinabuhovtsova/Documents/Countries/client/src/components/SignUpForm.js"],"names":["React","Field","reduxForm","validate","values","errors","existingusers","flag","axios","get","then","res","data","forEach","name","push","console","log","username","includes","length","password","confirmpassword","renderField","input","label","type","meta","touched","error","warning","SignUpForm","Component","constructor","props","state","finished","countries","Clear","bind","setState","componentDidMount","fetch","json","count","render","handleSubmit","pristine","reset","submitting","map","country","ind","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport '../css/Button.css';\n\n/*const validate = values => {\n    const errors = {}\n    if (!values.username) {\n      errors.username = 'Required'\n    } else if (values.username.length < 5) {\n      errors.username = 'Must be 5 characters or more'\n    }\n\n    if (!values.password) {\n      errors.password = 'Required'\n    }\n    if (!values.confirmpassword) {\n        errors.confirmpassword = 'Required'\n    }\n    else if (values.password!==values.confirmpassword) {\n      errors.password = 'Passwords must match'\n    }  return errors \n}*/\n\nconst validate = values => {\n  const errors = {}\n  let existingusers=[]\n  let flag=false\n  axios.get ('/catalog/users')\n    .then (res => {res.data.forEach(name => {\n      existingusers.push(name)})\n      console.log(existingusers, values.username)\n      if (existingusers.includes(values.username)) {\n        flag=true\n        console.log('here')\n      }\n    console.log('flag', flag)\n  if (!values.username) {\n    errors.username = 'Required'\n  } else if (values.username.length < 5) {\n    errors.username = 'Must be 5 characters or more'\n  }\n  else if (flag) {\n    console.log('here2')\n    errors.username = 'This nickname is reserved, try another one'\n  }\n  if (!values.password) {\n    errors.password = 'Required'\n  }\n  if (!values.confirmpassword) {\n      errors.confirmpassword = 'Required'\n  }\n  else if (values.password!==values.confirmpassword) {\n    errors.password = 'Passwords must match'\n  } console.log(errors) ; \n}); console.log('res'); console.log(errors); return errors \n};\n\nconst renderField = ({input, label, type, meta: { touched, error, warning } }) => (\n    <div>\n    <label>{label}</label>\n    <div>\n      <input {...input} placeholder={label} type={type}/>\n      {touched && ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\n    </div>\n  </div>\n)\n\n\nclass SignUpForm extends React.Component{\n        constructor (props) {\n          super (props)\n          this.state = {\n            finished: false, \n            countries: []\n          }\n          this.Clear=this.Clear.bind(this);\n        }\n\n        Clear () {\n          this.setState ({finished: true})\n        }\n\n        componentDidMount() {\n            fetch ('catalog/countries')\n            .then (res => res.json())\n            .then((count) =>this.setState({countries: count}))}\n\n        render () {\n        const { handleSubmit, pristine, reset, submitting } = this.props\n        return (\n           <form onSubmit={handleSubmit} className = 'col-9'>\n               <Field name ='username' type = 'text' component={renderField} label = 'Username'/>\n               <Field name ='password' type = 'password' component={renderField} label = 'Password'/>\n               <Field name ='confirmpassword' type = 'password' component={renderField} label = 'Confirm password'/>\n               \n               <div>\n               <label>Where do you live?   </label>\n               <Field name=\"country\" component=\"select\" className=\"form-control\">\n               {this.state.countries.map((country, ind) =>\n                <option key={ind} value = {country}>{country}</option>)}\n               </Field>\n               </div>\n\n                 <button className=\"btn btn-outline-primary signinbut\" type = 'submit' disabled={submitting}>Sign Up</button> \n                 <button className=\"btn btn-outline-primary clear signinbut\" type=\"button\" disabled={pristine || submitting} onClick={reset}>Clear Values</button>\n              \n           </form>\n        )}}\n\nexport default reduxForm ({\n  form: 'SignUpForm',\n  validate\n})(SignUpForm)\n\n"]},"metadata":{},"sourceType":"module"}